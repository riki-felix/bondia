---
export const prerender = false;
---
<html lang="es">
  <head>
	<meta charset="utf-8" />
	<title>Nueva propiedad</title>
	<style>
	  body { font-family: sans-serif; max-width: 600px; margin: 2rem auto; }
	  form { display: flex; flex-direction: column; gap: 1rem; }
	  .ok { background:#e6ffed; border:1px solid #33aa55; padding:.5rem }
	  .err{ background:#ffeaea; border:1px solid #cc0000; padding:.5rem }
	</style>
  </head>
  <body>
	<h1>Nueva propiedad</h1>

	<form id="f" method="post" action="#">
	  <label>T√≠tulo<br/><input name="title" required /></label>
	  <label>Direcci√≥n<br/><input name="address" required /></label>
	  <label>Foto (opcional)<br/><input type="file" name="image" accept="image/*" /></label>
	  <button type="submit">Crear propiedad</button>
	</form>

	<p id="msg"></p>

	<!-- üëá Client-only, sin imports de npm directos -->
	<script is:inline type="module">
	  import { supabase } from '/src/scripts/supabaseClient.js';
	
	  const form = document.getElementById('f');
	  const msg  = document.getElementById('msg');
	
	  const slugify = (text) =>
		text.toString()
		  .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
		  .toLowerCase().trim()
		  .replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');
	
	  form.addEventListener('submit', async (e) => {
		e.preventDefault();
		msg.className = '';
		msg.textContent = 'Guardando‚Ä¶';
	
		try {
		  // 1) sesi√≥n del usuario
		  const { data: { session } } = await supabase.auth.getSession();
		  const user_id = session?.user?.id;
		  if (!user_id) throw new Error('No hay sesi√≥n');
	
		  // 2) datos del formulario
		  const fd = new FormData(form);
		  const title   = (fd.get('title')   || '').toString().trim();
		  const address = (fd.get('address') || '').toString().trim();
		  const file    = fd.get('image');
	
		  if (!title || !address) throw new Error('Faltan t√≠tulo o direcci√≥n');
	
		  const slug = slugify(title);
	
		  // 3) subir imagen (opcional)
		  let image_url = null;
		  let image_path = null;
	
		  if (file && file.size > 0) {
			const ext = (file.name.split('.').pop() || 'jpg').toLowerCase();
			const filePath = `${user_id}/${crypto?.randomUUID?.() || Date.now()}-${slug}.${ext}`;
	
			const { error: upErr } = await supabase
			  .storage
			  .from('property-images')  // üëà nuevo nombre del bucket
			  .upload(filePath, file, {
				cacheControl: '3600',
				upsert: false,
				contentType: file.type || 'image/*'
			  });
	
			if (upErr) throw upErr;
	
			// bucket p√∫blico ‚Üí URL p√∫blica
			const { data: pub } = supabase
			  .storage
			  .from('property-images')   // üëà tambi√©n aqu√≠
			  .getPublicUrl(filePath);
	
			image_url = pub?.publicUrl || null;
			image_path = filePath;
		  }
	
		  // 4) guardar registro en tu Function
		  const res = await fetch('/.netlify/functions/createProperty', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ title, address, user_id, image_url, image_path }),
		  });
	
		  if (!res.ok) throw new Error(await res.text());
		  const data = await res.json();
	
		  msg.className = 'ok';
		  msg.innerHTML = `‚úÖ Propiedad creada<br><a href="/propiedad/${data.id}">Ver propiedad</a>`;
		  form.reset();
		} catch (err) {
		  msg.className = 'err';
		  msg.textContent = '‚ùå ' + (err?.message || String(err));
		}
	  });
	</script>
  </body>
</html>